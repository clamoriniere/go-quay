// Code generated by go-swagger; DO NOT EDIT.

package permission

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new permission API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for permission API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ChangeTeamPermissions(params *ChangeTeamPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeTeamPermissionsOK, error)

	ChangeUserPermissions(params *ChangeUserPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeUserPermissionsOK, error)

	DeleteTeamPermissions(params *DeleteTeamPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTeamPermissionsNoContent, error)

	DeleteUserPermissions(params *DeleteUserPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserPermissionsNoContent, error)

	GetTeamPermissions(params *GetTeamPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamPermissionsOK, error)

	GetUserPermissions(params *GetUserPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserPermissionsOK, error)

	GetUserTransitivePermission(params *GetUserTransitivePermissionParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserTransitivePermissionOK, error)

	ListRepoTeamPermissions(params *ListRepoTeamPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*ListRepoTeamPermissionsOK, error)

	ListRepoUserPermissions(params *ListRepoUserPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*ListRepoUserPermissionsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ChangeTeamPermissions Update the existing team permission.
*/
func (a *Client) ChangeTeamPermissions(params *ChangeTeamPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeTeamPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeTeamPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeTeamPermissions",
		Method:             "PUT",
		PathPattern:        "/api/v1/repository/{repository}/permissions/team/{teamname}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeTeamPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeTeamPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changeTeamPermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeUserPermissions Update the perimssions for an existing repository.
*/
func (a *Client) ChangeUserPermissions(params *ChangeUserPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeUserPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeUserPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeUserPermissions",
		Method:             "PUT",
		PathPattern:        "/api/v1/repository/{repository}/permissions/user/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeUserPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeUserPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changeUserPermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTeamPermissions Delete the permission for the specified team.
*/
func (a *Client) DeleteTeamPermissions(params *DeleteTeamPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTeamPermissionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTeamPermissions",
		Method:             "DELETE",
		PathPattern:        "/api/v1/repository/{repository}/permissions/team/{teamname}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTeamPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTeamPermissionsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTeamPermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUserPermissions Delete the permission for the user.
*/
func (a *Client) DeleteUserPermissions(params *DeleteUserPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserPermissionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserPermissions",
		Method:             "DELETE",
		PathPattern:        "/api/v1/repository/{repository}/permissions/user/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserPermissionsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUserPermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeamPermissions Fetch the permission for the specified team.
*/
func (a *Client) GetTeamPermissions(params *GetTeamPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTeamPermissions",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/permissions/team/{teamname}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTeamPermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserPermissions Get the permission for the specified user.
*/
func (a *Client) GetUserPermissions(params *GetUserPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserPermissions",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/permissions/user/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserPermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserTransitivePermission Get the fetch the permission for the specified user.
*/
func (a *Client) GetUserTransitivePermission(params *GetUserTransitivePermissionParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserTransitivePermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserTransitivePermissionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserTransitivePermission",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/permissions/user/{username}/transitive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserTransitivePermissionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserTransitivePermissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserTransitivePermission: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRepoTeamPermissions List all team permission.
*/
func (a *Client) ListRepoTeamPermissions(params *ListRepoTeamPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*ListRepoTeamPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRepoTeamPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRepoTeamPermissions",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/permissions/team/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRepoTeamPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRepoTeamPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRepoTeamPermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRepoUserPermissions List all user permissions.
*/
func (a *Client) ListRepoUserPermissions(params *ListRepoUserPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*ListRepoUserPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRepoUserPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRepoUserPermissions",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/permissions/user/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRepoUserPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRepoUserPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRepoUserPermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
