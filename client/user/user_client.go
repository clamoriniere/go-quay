// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateStar(params *CreateStarParams, authInfo runtime.ClientAuthInfoWriter) (*CreateStarCreated, error)

	DeleteStar(params *DeleteStarParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteStarNoContent, error)

	GetLoggedInUser(params *GetLoggedInUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetLoggedInUserOK, error)

	GetUserInformation(params *GetUserInformationParams) (*GetUserInformationOK, error)

	ListStarredRepos(params *ListStarredReposParams, authInfo runtime.ClientAuthInfoWriter) (*ListStarredReposOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateStar Star a repository.
*/
func (a *Client) CreateStar(params *CreateStarParams, authInfo runtime.ClientAuthInfoWriter) (*CreateStarCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStarParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStar",
		Method:             "POST",
		PathPattern:        "/api/v1/user/starred",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateStarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateStarCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createStar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStar Removes a star from a repository.
*/
func (a *Client) DeleteStar(params *DeleteStarParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteStarNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStarParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStar",
		Method:             "DELETE",
		PathPattern:        "/api/v1/user/starred/{repository}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStarNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLoggedInUser Get user information for the authenticated user.
*/
func (a *Client) GetLoggedInUser(params *GetLoggedInUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetLoggedInUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoggedInUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLoggedInUser",
		Method:             "GET",
		PathPattern:        "/api/v1/user/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLoggedInUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLoggedInUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLoggedInUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserInformation Get user information for the specified user.
*/
func (a *Client) GetUserInformation(params *GetUserInformationParams) (*GetUserInformationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserInformationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserInformation",
		Method:             "GET",
		PathPattern:        "/api/v1/users/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserInformationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserInformationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserInformation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStarredRepos List all starred repositories.
*/
func (a *Client) ListStarredRepos(params *ListStarredReposParams, authInfo runtime.ClientAuthInfoWriter) (*ListStarredReposOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStarredReposParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStarredRepos",
		Method:             "GET",
		PathPattern:        "/api/v1/user/starred",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListStarredReposReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStarredReposOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listStarredRepos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
