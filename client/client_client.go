// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/clamoriniere/go-quay/client/billing"
	"github.com/clamoriniere/go-quay/client/build"
	"github.com/clamoriniere/go-quay/client/discovery"
	"github.com/clamoriniere/go-quay/client/error"
	"github.com/clamoriniere/go-quay/client/globalmessages"
	"github.com/clamoriniere/go-quay/client/image"
	"github.com/clamoriniere/go-quay/client/logs"
	"github.com/clamoriniere/go-quay/client/manifest"
	"github.com/clamoriniere/go-quay/client/organization"
	"github.com/clamoriniere/go-quay/client/permission"
	"github.com/clamoriniere/go-quay/client/prototype"
	"github.com/clamoriniere/go-quay/client/repository"
	"github.com/clamoriniere/go-quay/client/repositorynotification"
	"github.com/clamoriniere/go-quay/client/repotoken"
	"github.com/clamoriniere/go-quay/client/robot"
	"github.com/clamoriniere/go-quay/client/search"
	"github.com/clamoriniere/go-quay/client/secscan"
	"github.com/clamoriniere/go-quay/client/signing"
	"github.com/clamoriniere/go-quay/client/tag"
	"github.com/clamoriniere/go-quay/client/team"
	"github.com/clamoriniere/go-quay/client/trigger"
	"github.com/clamoriniere/go-quay/client/user"
)

// Default client HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "quay.io"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new client HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Client {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new client HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Client {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new client client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(Client)
	cli.Transport = transport
	cli.Billing = billing.New(transport, formats)
	cli.Build = build.New(transport, formats)
	cli.Discovery = discovery.New(transport, formats)
	cli.Error = error.New(transport, formats)
	cli.Globalmessages = globalmessages.New(transport, formats)
	cli.Image = image.New(transport, formats)
	cli.Logs = logs.New(transport, formats)
	cli.Manifest = manifest.New(transport, formats)
	cli.Organization = organization.New(transport, formats)
	cli.Permission = permission.New(transport, formats)
	cli.Prototype = prototype.New(transport, formats)
	cli.Repository = repository.New(transport, formats)
	cli.Repositorynotification = repositorynotification.New(transport, formats)
	cli.Repotoken = repotoken.New(transport, formats)
	cli.Robot = robot.New(transport, formats)
	cli.Search = search.New(transport, formats)
	cli.Secscan = secscan.New(transport, formats)
	cli.Signing = signing.New(transport, formats)
	cli.Tag = tag.New(transport, formats)
	cli.Team = team.New(transport, formats)
	cli.Trigger = trigger.New(transport, formats)
	cli.User = user.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Client is a client for client
type Client struct {
	Billing billing.ClientService

	Build build.ClientService

	Discovery discovery.ClientService

	Error error.ClientService

	Globalmessages globalmessages.ClientService

	Image image.ClientService

	Logs logs.ClientService

	Manifest manifest.ClientService

	Organization organization.ClientService

	Permission permission.ClientService

	Prototype prototype.ClientService

	Repository repository.ClientService

	Repositorynotification repositorynotification.ClientService

	Repotoken repotoken.ClientService

	Robot robot.ClientService

	Search search.ClientService

	Secscan secscan.ClientService

	Signing signing.ClientService

	Tag tag.ClientService

	Team team.ClientService

	Trigger trigger.ClientService

	User user.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Client) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Billing.SetTransport(transport)
	c.Build.SetTransport(transport)
	c.Discovery.SetTransport(transport)
	c.Error.SetTransport(transport)
	c.Globalmessages.SetTransport(transport)
	c.Image.SetTransport(transport)
	c.Logs.SetTransport(transport)
	c.Manifest.SetTransport(transport)
	c.Organization.SetTransport(transport)
	c.Permission.SetTransport(transport)
	c.Prototype.SetTransport(transport)
	c.Repository.SetTransport(transport)
	c.Repositorynotification.SetTransport(transport)
	c.Repotoken.SetTransport(transport)
	c.Robot.SetTransport(transport)
	c.Search.SetTransport(transport)
	c.Secscan.SetTransport(transport)
	c.Signing.SetTransport(transport)
	c.Tag.SetTransport(transport)
	c.Team.SetTransport(transport)
	c.Trigger.SetTransport(transport)
	c.User.SetTransport(transport)
}
