// Code generated by go-swagger; DO NOT EDIT.

package manifest

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new manifest API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for manifest API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddManifestLabel(params *AddManifestLabelParams, authInfo runtime.ClientAuthInfoWriter) (*AddManifestLabelCreated, error)

	DeleteManifestLabel(params *DeleteManifestLabelParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteManifestLabelNoContent, error)

	GetManifestLabel(params *GetManifestLabelParams, authInfo runtime.ClientAuthInfoWriter) (*GetManifestLabelOK, error)

	GetRepoManifest(params *GetRepoManifestParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepoManifestOK, error)

	ListManifestLabels(params *ListManifestLabelsParams, authInfo runtime.ClientAuthInfoWriter) (*ListManifestLabelsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddManifestLabel Adds a new label into the tag manifest.
*/
func (a *Client) AddManifestLabel(params *AddManifestLabelParams, authInfo runtime.ClientAuthInfoWriter) (*AddManifestLabelCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddManifestLabelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addManifestLabel",
		Method:             "POST",
		PathPattern:        "/api/v1/repository/{repository}/manifest/{manifestref}/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddManifestLabelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddManifestLabelCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addManifestLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteManifestLabel Deletes an existing label from a manifest.
*/
func (a *Client) DeleteManifestLabel(params *DeleteManifestLabelParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteManifestLabelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteManifestLabelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteManifestLabel",
		Method:             "DELETE",
		PathPattern:        "/api/v1/repository/{repository}/manifest/{manifestref}/labels/{labelid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteManifestLabelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteManifestLabelNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteManifestLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetManifestLabel Retrieves the label with the specific ID under the manifest.
*/
func (a *Client) GetManifestLabel(params *GetManifestLabelParams, authInfo runtime.ClientAuthInfoWriter) (*GetManifestLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetManifestLabelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getManifestLabel",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/manifest/{manifestref}/labels/{labelid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetManifestLabelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetManifestLabelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getManifestLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepoManifest get repo manifest API
*/
func (a *Client) GetRepoManifest(params *GetRepoManifestParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepoManifestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepoManifestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRepoManifest",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/manifest/{manifestref}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepoManifestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepoManifestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepoManifest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListManifestLabels list manifest labels API
*/
func (a *Client) ListManifestLabels(params *ListManifestLabelsParams, authInfo runtime.ClientAuthInfoWriter) (*ListManifestLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListManifestLabelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listManifestLabels",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/manifest/{manifestref}/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListManifestLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListManifestLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listManifestLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
