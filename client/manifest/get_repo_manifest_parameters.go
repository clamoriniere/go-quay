// Code generated by go-swagger; DO NOT EDIT.

package manifest

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRepoManifestParams creates a new GetRepoManifestParams object
// with the default values initialized.
func NewGetRepoManifestParams() *GetRepoManifestParams {
	var ()
	return &GetRepoManifestParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRepoManifestParamsWithTimeout creates a new GetRepoManifestParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRepoManifestParamsWithTimeout(timeout time.Duration) *GetRepoManifestParams {
	var ()
	return &GetRepoManifestParams{

		timeout: timeout,
	}
}

// NewGetRepoManifestParamsWithContext creates a new GetRepoManifestParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRepoManifestParamsWithContext(ctx context.Context) *GetRepoManifestParams {
	var ()
	return &GetRepoManifestParams{

		Context: ctx,
	}
}

// NewGetRepoManifestParamsWithHTTPClient creates a new GetRepoManifestParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRepoManifestParamsWithHTTPClient(client *http.Client) *GetRepoManifestParams {
	var ()
	return &GetRepoManifestParams{
		HTTPClient: client,
	}
}

/*GetRepoManifestParams contains all the parameters to send to the API endpoint
for the get repo manifest operation typically these are written to a http.Request
*/
type GetRepoManifestParams struct {

	/*Manifestref
	  The digest of the manifest

	*/
	Manifestref string
	/*Repository
	  The full path of the repository. e.g. namespace/name

	*/
	Repository string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get repo manifest params
func (o *GetRepoManifestParams) WithTimeout(timeout time.Duration) *GetRepoManifestParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get repo manifest params
func (o *GetRepoManifestParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get repo manifest params
func (o *GetRepoManifestParams) WithContext(ctx context.Context) *GetRepoManifestParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get repo manifest params
func (o *GetRepoManifestParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get repo manifest params
func (o *GetRepoManifestParams) WithHTTPClient(client *http.Client) *GetRepoManifestParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get repo manifest params
func (o *GetRepoManifestParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithManifestref adds the manifestref to the get repo manifest params
func (o *GetRepoManifestParams) WithManifestref(manifestref string) *GetRepoManifestParams {
	o.SetManifestref(manifestref)
	return o
}

// SetManifestref adds the manifestref to the get repo manifest params
func (o *GetRepoManifestParams) SetManifestref(manifestref string) {
	o.Manifestref = manifestref
}

// WithRepository adds the repository to the get repo manifest params
func (o *GetRepoManifestParams) WithRepository(repository string) *GetRepoManifestParams {
	o.SetRepository(repository)
	return o
}

// SetRepository adds the repository to the get repo manifest params
func (o *GetRepoManifestParams) SetRepository(repository string) {
	o.Repository = repository
}

// WriteToRequest writes these params to a swagger request
func (o *GetRepoManifestParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param manifestref
	if err := r.SetPathParam("manifestref", o.Manifestref); err != nil {
		return err
	}

	// path param repository
	if err := r.SetPathParam("repository", o.Repository); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
